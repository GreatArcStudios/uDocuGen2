using System.Collections.Generic;
namespace uDocumentGenerator.Generation
{
    /// <summary>
    /// An object representation of a function. Includes the important features of a function
    /// </summary>
    public class FunctionRepresentation
    {
        // This is the list of parameters generated by reflection. \n\n
        // 1. Each param is formatted as name, paramtype, and default value. \n
        // 2. Use this **if and only if** ```cleanParamList``` isn't accurate enough for you
        readonly List<(string, string, object)> dirtyParamList = new List<(string, string, object)>();
        // Each param is formatted as type + name, default value
        readonly List<(string, object)> cleanParamList = new List<(string, object)>();
        // A list of the function's modifiers
        readonly List<string> modifiers = new List<string>();
        // The description of the function
        public string description;
        // The function's access modifier
        public string accessModifier;
        // The function's name
        public string functionName;

        public FunctionRepresentation(string p_name, string p_accessmod, string p_description, List<string> p_modifiers, List<(string, string, object)> p_dirty_param_list, List<(string, object)> p_clean_param_list)
        {
            accessModifier = p_accessmod;
            description = p_description;
            modifiers = p_modifiers;
            dirtyParamList = p_dirty_param_list;
            cleanParamList = p_clean_param_list;
            functionName = p_name;
        }
        /// <summary>
        /// Method to manually add a parameter to ```dirtyParamList```
        /// </summary>
        /// <param name="parameter"></param>
        public void AddParameter((string, string, object) parameter)
        {
            dirtyParamList.Add(parameter);
        }
        /// <summary>
        /// Method to manually add a parameter to ```modifiers``` 
        /// </summary>
        /// <param name="modifier"></param>
        public void AddModifier(string modifier)
        {
            modifiers.Add(modifier);
        }

    }
}
